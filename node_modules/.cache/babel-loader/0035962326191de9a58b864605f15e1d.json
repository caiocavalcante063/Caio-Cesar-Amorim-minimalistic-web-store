{"ast":null,"code":"import { ADD_TO_CART } from \"../actions\";\nimport { REMOVE_FROM_CART } from \"../actions\";\nconst INITIAL_STATE = {\n  cartItems: [],\n  indexCounter: 0\n}; // reference for the next 2 functions below: https://dev.to/suprabhasupi/object-equality-in-javascript-15ff\n\nconst isEqual = (obj1, obj2) => {\n  var props1 = Object.getOwnPropertyNames(obj1);\n  var props2 = Object.getOwnPropertyNames(obj2);\n\n  if (props1.length !== props2.length) {\n    return false;\n  }\n\n  for (var i = 0; i < props1.length; i++) {\n    let val1 = obj1[props1[i]];\n    let val2 = obj2[props1[i]];\n    let isObjects = isObject(val1) && isObject(val2);\n\n    if (isObjects && !isEqual(val1, val2) || !isObjects && val1 !== val2) {\n      return false;\n    }\n  }\n\n  return true;\n};\n\nconst isObject = object => {\n  return object != null && typeof object === \"object\";\n};\n\nconst productOccurrenceVerifier = (state, action) => {\n  let occurrence = false;\n\n  for (let item of state.cartItems) {\n    if (isEqual(item.selectedAttributes, action.product.selectedAttributes) && isEqual(item.productDetails, action.product.productDetails)) {\n      occurrence = true;\n    }\n  }\n\n  return occurrence;\n};\n\nconst matchedProductSearcher = (state, action) => {\n  return state.cartItems.find(item => {\n    return isEqual(item.selectedAttributes, action.product.selectedAttributes) && isEqual(item.productDetails, action.product.productDetails);\n  });\n};\n\nconst cartReducer = function () {\n  let state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : INITIAL_STATE;\n  let action = arguments.length > 1 ? arguments[1] : undefined;\n\n  switch (action.type) {\n    case ADD_TO_CART:\n      // checking if there is already an element in the cart with the same properties and selected attributes as the one the user is trying to add\n      let addToCartOcurrence = productOccurrenceVerifier(state, action); // if there's no occurrence, the product is added to the cart, else, the quantity of the product is updated\n\n      if (!addToCartOcurrence) {\n        action.product.productIndex = state.indexCounter;\n        return { ...state,\n          cartItems: [...state.cartItems, action.product],\n          indexCounter: state.indexCounter + 1\n        };\n      } else {\n        const addToCartMatchedProduct = matchedProductSearcher(state, action);\n        const newQuantity = state.cartItems[state.cartItems.indexOf(addToCartMatchedProduct)].quantity += 1;\n        addToCartMatchedProduct.quantity = newQuantity;\n        return { ...state,\n          cartItems: [...state.cartItems]\n        };\n      }\n\n    case REMOVE_FROM_CART:\n      const removeFromCartMatchedProduct = matchedProductSearcher(state, action); // if the product quantity is 1, then the subtract button should remove the product from the cart\n      // else, 1 product is subtracted\n\n      if (removeFromCartMatchedProduct.quantity === 1) {\n        return { ...state,\n          cartItems: [...state.cartItems.filter(product => {\n            return product !== matchedProductSearcher(state, action);\n          })]\n        };\n      } else {\n        const newQuantity = state.cartItems[state.cartItems.indexOf(removeFromCartMatchedProduct)].quantity -= 1;\n        removeFromCartMatchedProduct.quantity = newQuantity;\n        return { ...state,\n          cartItems: [...state.cartItems]\n        };\n      }\n\n    default:\n      return state;\n  }\n};\n\nexport default cartReducer;","map":{"version":3,"sources":["/home/caio/Documentos/trybe/github-repositorios/minimalistic-web-store/src/redux/reducers/cart.js"],"names":["ADD_TO_CART","REMOVE_FROM_CART","INITIAL_STATE","cartItems","indexCounter","isEqual","obj1","obj2","props1","Object","getOwnPropertyNames","props2","length","i","val1","val2","isObjects","isObject","object","productOccurrenceVerifier","state","action","occurrence","item","selectedAttributes","product","productDetails","matchedProductSearcher","find","cartReducer","type","addToCartOcurrence","productIndex","addToCartMatchedProduct","newQuantity","indexOf","quantity","removeFromCartMatchedProduct","filter"],"mappings":"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","sourcesContent":["import { ADD_TO_CART } from \"../actions\";\nimport { REMOVE_FROM_CART } from \"../actions\";\n\nconst INITIAL_STATE = {\n  cartItems: [],\n  indexCounter: 0,\n};\n\n// reference for the next 2 functions below: https://dev.to/suprabhasupi/object-equality-in-javascript-15ff\nconst isEqual = (obj1, obj2) => {\n  var props1 = Object.getOwnPropertyNames(obj1);\n  var props2 = Object.getOwnPropertyNames(obj2);\n\n  if (props1.length !== props2.length) {\n    return false;\n  }\n\n  for (var i = 0; i < props1.length; i++) {\n    let val1 = obj1[props1[i]];\n    let val2 = obj2[props1[i]];\n    let isObjects = isObject(val1) && isObject(val2);\n\n    if ((isObjects && !isEqual(val1, val2)) || (!isObjects && val1 !== val2)) {\n      return false;\n    }\n  }\n  return true;\n};\n\nconst isObject = (object) => {\n  return object != null && typeof object === \"object\";\n};\n\nconst productOccurrenceVerifier = (state, action) => {\n  let occurrence = false;\n  for (let item of state.cartItems) {\n    if (\n      isEqual(item.selectedAttributes, action.product.selectedAttributes) &&\n      isEqual(item.productDetails, action.product.productDetails)\n    ) {\n      occurrence = true;\n    }\n  }\n  return occurrence;\n};\n\nconst matchedProductSearcher = (state, action) => {\n  return state.cartItems.find((item) => {\n    return (\n      isEqual(item.selectedAttributes, action.product.selectedAttributes) &&\n      isEqual(item.productDetails, action.product.productDetails)\n    );\n  });\n};\n\nconst cartReducer = (state = INITIAL_STATE, action) => {\n  switch (action.type) {\n    case ADD_TO_CART:\n      // checking if there is already an element in the cart with the same properties and selected attributes as the one the user is trying to add\n      let addToCartOcurrence = productOccurrenceVerifier(state, action);\n\n      // if there's no occurrence, the product is added to the cart, else, the quantity of the product is updated\n      if (!addToCartOcurrence) {\n        action.product.productIndex = state.indexCounter;\n        return {\n          ...state,\n          cartItems: [...state.cartItems, action.product],\n          indexCounter: state.indexCounter + 1,\n        };\n      } else {\n        const addToCartMatchedProduct = matchedProductSearcher(state, action);\n        const newQuantity = (state.cartItems[\n          state.cartItems.indexOf(addToCartMatchedProduct)\n        ].quantity += 1);\n\n        addToCartMatchedProduct.quantity = newQuantity;\n\n        return {\n          ...state,\n          cartItems: [...state.cartItems],\n        };\n      }\n\n    case REMOVE_FROM_CART:\n      const removeFromCartMatchedProduct = matchedProductSearcher(\n        state,\n        action\n      );\n\n      // if the product quantity is 1, then the subtract button should remove the product from the cart\n      // else, 1 product is subtracted\n      if (removeFromCartMatchedProduct.quantity === 1) {\n        return {\n          ...state,\n          cartItems: [\n            ...state.cartItems.filter((product) => {\n              return product !== matchedProductSearcher(state, action);\n            }),\n          ],\n        };\n      } else {\n        const newQuantity = (state.cartItems[\n          state.cartItems.indexOf(removeFromCartMatchedProduct)\n        ].quantity -= 1);\n\n        removeFromCartMatchedProduct.quantity = newQuantity;\n\n        return {\n          ...state,\n          cartItems: [...state.cartItems],\n        };\n      }\n    default:\n      return state;\n  }\n};\n\nexport default cartReducer;\n"]},"metadata":{},"sourceType":"module"}